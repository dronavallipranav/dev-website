[["0",{"pageContent":"Pranav loves apples, bananas.\nPranav loves to play chess and the history of chess as well as the evolution of the game. His favorite chess players are Magnus Carlsen and Daniel Naroditsky.\nPranav's favorite sport is basketball and his favorite player is Steph Curry.\nFun Fact: If Pranav could only take two items to a remote island, Pranav would take his guitar and the book \"The Hitchiker's Guide to the Galaxy\"\nPranav is a little nerdy, he is also relatively outgoing, but a little shy around new people. He is also very passionate about his favorite things.\nPranav's hobbies are constantly changing, but right now he likes to play guitar, read, play chess and play video games. He loves coffee as well.\nPranav's favorite way to start the morning is with a cup of coffee outside and a nice sunrise.\nPranav's favorite video game is Skyrim.\nGrowing up, Pranav loved to play video games, he started with a PS2, then an Xbox 360, followed by an xbox one and a ps4.","metadata":{"loc":{"lines":{"from":1,"to":9}}}}],["1",{"pageContent":"Pranav's favorite video game is Skyrim.\nGrowing up, Pranav loved to play video games, he started with a PS2, then an Xbox 360, followed by an xbox one and a ps4.\nPranav's favorite actor is Ryan Gosling.\nPranav has many favorite movies, but his favorite Star Wars movie is Revenge of The Sith.\nPranav's favorite food is Chicken Alfredo, or Pizza.\nPranav's favorite fast food chain is Chick-Fil-A.\nPranav loves all types of animals, but especially cats.\nIn his free time, Pranav loves to code, play chess, or listen to music.\nPranav is a Junior at UW-Madison majoring in Computer Science and Math.\nPranav's favorite courses at Madison have been Discrete Math, Algorithms, and Machine Organization.\nPranav is currently watching The Bear on Hulu\nPranav is pretty relaxed, and you can talk to him about almost anything random.","metadata":{"loc":{"lines":{"from":9,"to":20}}}}],["2",{"pageContent":"Pranav is currently watching The Bear on Hulu\nPranav is pretty relaxed, and you can talk to him about almost anything random.\nPranav's favorite languages to work with are Java (which he is most comfortable with), Python (which he thinks is the easiest to use), C++ (which he admires the freedom of), I also am interested in learning OCaml and Rust as they seem really cool although I am not very good with them yet.(Which he think is really cool and is currently trying to learn).\nPranav is relatively experienced with JavaScript and has done work with various frontend frameworks like Astro for this website.\nPranav has recently gotten more into systems/low level programming and will likely take Compilers as well as the grad level OS course in the future at Madison.\nFor Pranav's prior work experience, he interned at Entegral which is a subsidary of Enterprise where he got to work on a ML project, Data Pipelines, as well as the frontend/backend for an Angular App.","metadata":{"loc":{"lines":{"from":20,"to":25}}}}],["3",{"pageContent":"Pranav also loves spending a bit of time each week volunteering. He has held a volunteering role consistently since high school, and he enjoys spending a little time each week to give back to the community. It is pretty altruistic for him as it, and he sees it as weekly detox from the stresses of everyday life. Pranav is currently volunteering at the Dane County Humane Society as a Carestaff assistant on the weekends.\nPranav is involved as a Lead Coordinator at the Undergraduate Project Lab at UW-Madison (extracurricular) where he mantains the infrastructure as well as organizing MadHacks semesterly which is the largest Hackathon in the state of Wisconsin.","metadata":{"loc":{"lines":{"from":26,"to":27}}}}],["4",{"pageContent":"Pranav is currently working on the GameBoy Emulator which you can read more about on his blog, but he halted development on it for a little as school started up, and MadHacks and the Interview season draws closer. He will likely finish the rest of it before the end of this year. He just needs to implement the I/O handling, fix some CPU bugs, display as well as tweak the MMU.\nPranav is also maintaining a few websites and is constantly adding new features to them (like this one and this AI).\nPranav enjoys full-stack dev and likes his work to constantly challenge his mind in different ways. He enjoys backend work a little more, but it honestly depends on the day.\nPranav's family consists of a Mom and Dad, as well as one sibling, his older brother.\nPranav also enjoys philosophy and enjoys having thought inducing conversations about tech, ethics, politics, and anything logical.","metadata":{"loc":{"lines":{"from":28,"to":32}}}}],["5",{"pageContent":"Pranav also enjoys philosophy and enjoys having thought inducing conversations about tech, ethics, politics, and anything logical.\nIf pranav could major in something other than Computer Science or Electrical Engineeringit would either be Physics or Mechincal Engineering. He loves learning about Space and Time.\nPranav is a Software Developer with a broad skillset.\nThe rest of this file concerns pranav's blog posts:\nThe need for migration all started when I was building a chatbot about myself using Netlify's serverless functions. The backend worked fine locally, but when I tried to deploy my site, I kept getting an error on Netlify’s build process: \"maximum call stack exceeded\". After doing some research online, I figured out it was either a recursive element in my code or possibly an issue with a dependency, maybe some circular dependency issue (hint hint).","metadata":{"loc":{"lines":{"from":32,"to":36}}}}],["6",{"pageContent":"I made a post on Netlify's forums to ask for help with the bug. While they acknowledged the issue, a solution wasn’t immediately available. I knew Netlify's serverless functions were built on AWS Lambda, and so I decided that this might be a good time to migrate to AWS. I thought I'd be able to fix this problem myself and get more detailed error logs on the issue I was facing. Little did I know, it would be much more difficult than I orginally imagined.\nMy backend was having trouble with Lambda, even though I had the hnswlib-node package installed and uploaded my code was having trouble importing the package in the Lambda environment. After doing research on the topic, I found some people having common issues on github and the issues weren't yet closed meaning that there wasn't one verified solution to the problem. It did seem like Amazon was aware of this issue and an issue with the Faiss library and aim to add support on Lambda to these problems.","metadata":{"loc":{"lines":{"from":37,"to":38}}}}],["7",{"pageContent":"My theory after learning a little more is that the the natively compiled hnswlib-node binary not working seamlessly with AWS Lambda, despite using the same X86 ISA and the same Node runtime. I did manage to find a workaround to the issue through containzering my backend on ECR and using Lambda to execute the image. \nAfter getting my backend situated, I started the process to transfer my domain ownership from Netlify to name.com. I wanted to use Route 53 to route my domain name, but it turns out Route 53 does not support .dev domains, and so I created a hosted zone on Route 53 and tweaked the DNS settings on name.com. Once done, Route 53 pointed my domains to my CloudFront distribution I created which served my S3 bucket.","metadata":{"loc":{"lines":{"from":39,"to":40}}}}],["8",{"pageContent":"I employed AWS API Gateway to act as a trigger for my Lambda function, providing an endpoint for my frontend to make requests to. It was relatively simple but introduced some CORS issues on API Gateway (which I managed to resolve relatively quickly) to CORS issues with preflight request complications my Lambda and CloudFront.\nAfter doing more debugging and research, I found that CloudFront caching settings stripping my CORS headers, combined with the Lambda function timing out, was the real problem behind my CORS errors. Disabling caching seemed to fix the problem, but this is pretty inefficent and I plan on simply whitelisting the CORS headers in the future. Tweaking the Lambda timeout was the final fix and resulted in a fully connected functional website hosted on AWS. Seeing PranavBot functional was incredibly satisfying. \nWith everything in place, I integrated a GitHub Action to automatically build and deploy my content to the S3 bucket. The migration to AWS was finally complete.","metadata":{"loc":{"lines":{"from":41,"to":43}}}}],["9",{"pageContent":"With everything in place, I integrated a GitHub Action to automatically build and deploy my content to the S3 bucket. The migration to AWS was finally complete.\nEach new solution to an issue I'd face would introduce another bug and challenge or make me fundamentally question the way I approached the migration. It wasn't easy, but the feeling of finding that solution was awesome. I didn't know at the time that it wasn't going to be as simple as uploading my code to Lambda and that I'd need to learn ECR and how to containerize a backend. I remember the exhilirating feeling I got when I finally managed to get a functional backend. I believe the best way to learn is to do and this experience was akin to a crash course in cloud infrastructure. I'm glad I went through this process, and I know next time I'm armed with the knowledge to make this a lot easier!","metadata":{"loc":{"lines":{"from":43,"to":44}}}}],["10",{"pageContent":"Making an emulator was an idea I had in the back of my head for a while. I had used emulators in the past to play my favorite pokemon games on my phone. I had also recently taken a course on memory management which I enjoyed, and so I figured I'd try to apply the skills I learned to scratch the itch while I wait to take OS. I had always assumed that emulator development would be an easy undertaking (no idea what gave me that assumption). After a little research, I realized that the project would be much larger than originally anticipated. It would require me to replicate the entirety of the GameBoy's unique hardware which is poorly documented due to the time period when it was created. But others have successfully created GameBoy emulators in the past and there is a dedicated emulator dev community on Reddit. With all that, I decided that this would be something that I would enjoy as well as a great learning experience for me, so I started development on my GameBoy Emulator with the","metadata":{"loc":{"lines":{"from":45,"to":45}}}}],["11",{"pageContent":"community on Reddit. With all that, I decided that this would be something that I would enjoy as well as a great learning experience for me, so I started development on my GameBoy Emulator with the eventual goal of emulating Pokemon Red.","metadata":{"loc":{"lines":{"from":45,"to":45}}}}],["12",{"pageContent":"Before starting development on my GameBoy Emulator, I had decided to try emulating the simpler Intel 8080 CPU. After some development and once I felt like I understood the process of developing an Emulator, I left to start work on my GameBoy. The most daunting task I was faced with at the start was the sheer amount of instructions that would need to be implemented for full emulation. The Emulator101 guide I looked at suggested a giant switch case that handles every instruction. I knew this approach wouldn't cut it for the GameBoy's massive instruction set which also includes an extended 256 instructions.","metadata":{"loc":{"lines":{"from":46,"to":46}}}}],["13",{"pageContent":"It was clear to me that I would need a modular and reusable codebase, something commonly preached in the software world, but something that few personal projects will truly force you to implement. I was able to design helper methods that generalized operations across the emulator by utilizing function pointers, which proved particularly useful for being able to read/write to CPU's state struct registers. This greatly generalized the load functions and any instruction that needs to use a register. I had also decided to use CMake to help automate the build process as my number of header and source files grew.","metadata":{"loc":{"lines":{"from":47,"to":47}}}}],["14",{"pageContent":"With my project build and design set and the creation of my CPU state struct, I was finally ready to began implementing instructions. I knew this would be the meat of the project, and with my internship, I knew it was only feasible to finish a few sets of instructions a day. Regardless, I hunkered down and started daily incremental work.\nI knew as the codebase grew and the architecture grew more complex it would be increasingly hard to catch bugs in development. So I made sure to add unit tests as I implemented instructions to ensure that my code was working as expected. This helped guarantee my emulator's code quality and adopting this incremental develop then test mindset was something that projects in the past never really forced me to do.","metadata":{"loc":{"lines":{"from":49,"to":50}}}}],["15",{"pageContent":"The pivotal moment arrived with the introduction of the Memory Management Unit (MMU). Transitioning all read/write operations via the MMU instead of direct CPU interactions was a big shift, and required a significant refactoring of the code and tests. This also highlighted some unseen bugs as I started failing some of my movement tests. It turns out I wasn't properly incrementing and pushing onto the stack, but my test didn't properly test the case and gave a false positive. The MMU is not complete yet, and I have simply partitioned the memory into the GameBoy's different address spaces and routed all read/write to occur within its respective address space. I still need to implement all the various permissions, and commands that occur when writing to a certain address in memory. Once those cases are done, then I can call my MMU complete.","metadata":{"loc":{"lines":{"from":51,"to":51}}}}],["16",{"pageContent":"Today, I finally finished the rest of my instructions. I also created an execution loop as well as an opcode table to route the instructions to their respective handler. With that, I can began to test my instructions. I have decided to use Blargg's tests for my GameBoy emulator which are widely regarded as one of the best ways to test your CPU, display, audio. I am sure that running the Blargg tests will reveal bugs in my CPU and so development on the CPU isn't done yet. But I am excited to move on to the more exciting portions of the GameBoy's hardware and see how my project comes together.","metadata":{"loc":{"lines":{"from":52,"to":52}}}}],["17",{"pageContent":"At the Undergrad Project Lab (UPL), we were faced with a common issue: students wanted to access the lab outside of set office hours, but they could only do so when a coordinator was present. No one outside the room had a way to know if a coordinator was inside. A problem that I faced as a member of the UPL. Walking fifteen minutes to go to the UPL only to find out no one was in there was incredibly frustrating. This uncertainty led to reduced lab participation (I know it did for me) and hindered the purpose of UPL which is meant to provide a space for students to collabrate, innovate, or just socialize, and so I turned to technology to see if I could find a solution.\nI decided to use the **YOLOv7** model And to make the solution budget-friendly and easy to deploy, I chose the **Raspberry Pi** as the hardware as not only was it incredibly portable but also had low upkeep costs as the counter would need to run constantly.","metadata":{"loc":{"lines":{"from":53,"to":54}}}}],["18",{"pageContent":"The Raspberry Pi was set up in the lab, and with the help of a basic usb camera module, it started feeding live video to the **YOLOv7** model.  To make the solution even more accessible, I integrated the counter with the UPL's official Discord server using Discord's python API wrapper. With this integration, members could not only check the server to see if the lab was open, but also provide the headcount which proved useful to members and unknowingly useful to the organization as we now how had a more concrete way to track UPL participation.","metadata":{"loc":{"lines":{"from":55,"to":55}}}}],["19",{"pageContent":"It's hard to gauge how much participation was increased but I have had members thank me for the project, so it is safe to say it has helped at least some people. The solution was incredibly simple as well as easy to implement. The problem wasn't incredibly important, and yet it was one of the more satisfying projects I have undertaken. I am now more enthusiastic about the possibility of working on similar projects in the future to enhance accessibility for everyone.","metadata":{"loc":{"lines":{"from":56,"to":56}}}}],["20",{"pageContent":"My previous portfolio website wasn't bad. These pictures were at the end of its lifecycle. The website was considerably worse when I first started out, but the incremental improvements helped build it into a little more feasible portfolio. It was simple and had all the essentials you would want in a portfolio. The problem was, it was kind of slow... It also had many unnecessary animations including an incredible amount of scrolling animations which probably didn't help with the speed. I also felt the design was a little lacking – too many things happening at once, and it just didn't match with the minimalist design I envisioned. And so, I finally decided it was time for a V2.","metadata":{"loc":{"lines":{"from":57,"to":57}}}}],["21",{"pageContent":"About a year ago, I created my first-ever portfolio using React. A framework that has almost become synonymous with web dev in recent years. To the amateur web dev me, React was the holy grail of web development. Its flexibility in offering the capability to build effective and interactive SPA's, coupled with a large community, really assured me of my choice. But there were a few pitfalls with my prior portfolio website.","metadata":{"loc":{"lines":{"from":59,"to":59}}}}],["22",{"pageContent":"After better understanding what a portfolio website required and a little guidance from a friend (Thank you Nick), I decided my second portfolio website would be built with Astro. The framework's speed is seemingly unrivaled, and it proved much simpler to learn than React. The simplicity of the framework, my superior experience in web dev, and being able to reuse certain components from my React app made this website take significantly less time to build. This website is still in progress, so I apologize if the production version is a little lacking. I aim to continue to add more features and support throughout this website's lifecycle just like I did with my previous website.","metadata":{"loc":{"lines":{"from":60,"to":60}}}}],["23",{"pageContent":"I knew the reduction of unnecessary animations on my part as a developer and Astro's partial hydration and minimalist JS approach would result in a much faster experience. I expected the new site to be faster, but somehow, Astro's speed still managed to surprise me. I don't regret creating my first portfolio website. I still think learning React was invaluable and it will serve me when I need a site with more dynamism and need for states, but frankly for a website like this, it's just not necessary. If you are reading this, I hope you enjoy the faster, sleeker overall experience, at least until V3 comes around ;)","metadata":{"loc":{"lines":{"from":61,"to":61}}}}]]